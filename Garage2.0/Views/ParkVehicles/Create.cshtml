@model Garage2._0.Models.CreateViewModel
@inject IVehicleTypeSelectListService service
@inject IMemberSelectListService service2
@inject IParkingSpotSelectListService service3
@{
    ViewData["Title"] = "Create";
}



<h1>Park your vehicle</h1>

<h4>Enter the vehicle's data here</h4>
<hr />




<div class="row">

    <div class="col-md-4">
        <form asp-action="Create">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="VehicleTypeID" class="control-label"></label>
                <select asp-for="VehicleTypeID" class="form-control" id="VehicleTypeId" 
                        asp-items="@await service.GetAllVehicleTypesAsync()" >
                            <option value="">Choose vehicle type</option>
                </select>
                <span asp-validation-for="VehicleTypeID" class="text-danger"></span>
            </div>
            
            <div class="form-group">
                <label asp-for="ParkingSpotID" class="control-label"></label>
                <select asp-for="ParkingSpotID" class="form-control" id="ParkingSpotID" 
                        asp-items="@await service3.GetEmptyParkingSpotsAsync()" >
                            <option value="">Choose Parking Spot</option>
                </select>
                <span asp-validation-for="ParkingSpotID" class="text-danger"></span>
            </div>
 
            <div class="form-group">
                <label asp-for="RegNumber" class="control-label"></label>
                <input asp-for="RegNumber" class="form-control" />
                <span asp-validation-for="RegNumber" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Color" class="control-label"></label>
                <input asp-for="Color" class="form-control" />
                <span asp-validation-for="Color" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Brand" class="control-label"></label>
                <input asp-for="Brand" class="form-control" />
                <span asp-validation-for="Brand" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Model" class="control-label"></label>
                <input asp-for="Model" class="form-control" />
                <span asp-validation-for="Model" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Wheels" class="control-label"></label>
                <input asp-for="Wheels" class="form-control" />
                <span asp-validation-for="Wheels" class="text-danger"></span>
            </div>@*
            <div class="form-group">
                <label asp-for="MemberId" class="control-label"></label>
                <input asp-for="MemberId" class="form-control" />
                <span asp-validation-for="MemberId" class="text-danger"></span>
            </div>*@
            <div class="form-group">
                <label asp-for="MemberId" class="control-label">Owner</label>
                <select asp-for="MemberId" class="form-control" id="MemberId" 
                asp-items="@await service2.GetMembersAsync()" >
                <option value="">Choose Member</option>
                </select>
                <span asp-validation-for="MemberId" class="text-danger"></span>
            </div>
            <div class="form-group">
                <input type="submit" value="Park" class="btn btn-primary" id="SubmitId"/>
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Back to List</a>
</div>

@section Scripts {
    @{
    await Html.RenderPartialAsync("_ValidationScriptsPartial");
    <script type="text/javascript">


//const vehicleTypeDropDown = document.querySelector('#VehicleTypeId');

//const resetVehicleType = () => {
//    vehicleTypeDropDown.selected = false;
//    vehicleTypeDropDown.SelectedIndex = -1;
//}

//const getParkingSlot = () => {

//    var selectedVehicleType = $("#VehicleTypeId").val();
//    var parkingSlotSelect = $('#ParkingSlotId');
//    parkingSlotSelect.empty();
//    if (selectedVehicleType != null && selectedVehicleType != '') {
//        $.getJSON('@Url.Action("GetParkingSlots")', { vehicleType: selectedVehicleType }, function (slots) {
//            if (slots != null && !jQuery.isEmptyObject(slots)) {
//                $.each(slots, function (index, slots) {
//                option = document.createElement('option');
//                option.setAttribute('value', slots.text);
//                option.appendChild(document.createTextNode(slots.text));
//                parkingSlotSelect.append(option);

//                if (slots.value === "-1")
//                {
//                    document.querySelector('#SubmitId').disabled = true;
//                }
//                else 
//                {
//                    document.querySelector('#SubmitId').disabled = false;

//                }
//                });
//            };
//        });
//    }

//}
//vehicleTypeDropDown.addEventListener('change', getParkingSlot);

//vehicleTypeDropDown.addEventListener('load', resetVehicleType);
    
    </script>
}
}

